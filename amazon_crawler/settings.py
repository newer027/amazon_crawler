"""
Django settings for amazon_crawler project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
#STATICFILES_DIRS = os.path.join(BASE_DIR, 'static/')
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'compressor.finders.CompressorFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'a8k*bv37tqvprlf32gk!n==1@__k7xvyc95@td9c(d^!+2ne87'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
#DEBUG = True

ALLOWED_HOSTS = ['.amz668.com']
#ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'inventory',
    'keyword_rank',
    'asin_keyword',
    'core',
    'blog',
    'accounts',
    'rele_keyword',
    'short_url',
    'follow_sale',
    'flat_responsive',
    'admin_honeypot',
    'actions',
    'upload',
    'asin_detail',
    'review_monitor',
    'payment',
    'prime_asins',
    'review_qa_collect',
    'raven.contrib.django.raven_compat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'django_extensions',
    'compressor',
    'daterange_filter',
    'axes',
    'crispy_forms',
    'ckeditor',
    'taggit',
    'debug_toolbar',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'raven.contrib.django.raven_compat.middleware.Sentry404CatchMiddleware',
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
]

ROOT_URLCONF = 'amazon_crawler.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'amazon_crawler.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'amazon_crawler',
        'USER': 'ubuntu',
        'PASSWORD': 'ML#$gbdb',
        'HOST': 'localhost',
        'PORT': '',
    }
}

"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

"""
# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-cn'
#LANGUAGE_CODE = 'en'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Run management command 'set_site_values to set these values
SITE_NAME = 'AMZ668.COM'
SITE_DOMAIN = 'WWW.AMZ668.COM'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# CELERY
#BROKER_URL = 'redis://localhost:6379'
BROKER_URL = 'pyamqp://ubuntu:newer027@119.23.46.230:5672/vhost'
CELERY_RESULT_BACKEND = 'amqp'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#CELERYD_CONCURRENCY =50
CELERY_TIMEZONE = 'Asia/Shanghai'
#CELERY_ENABLE_UTC = False
#CELERY_IGNORE_RESULT = True
#CELERY_TASK_RESULT_EXPIRES = 1200
CELERY_AMQP_TASK_RESULT_EXPIRES = 18000
CELERY_DEFAULT_QUEUE = "default"

CELERY_QUEUES = {
    "default": { # 这是上面指定的默认队列
        "exchange": "default",
        "exchange_type": "direct",
        "routing_key": "default"
    },
    "topic_queue": { # 这是一个topic队列 凡是topictest开头的routing key都会被放到这个队列
        "routing_key": "topictest.#",
        "exchange": "topic_exchange",
        "exchange_type": "topic",
    },
    "keyword_rank": {
        "routing_key": "keyword_rank.#",
        "topic": "topic_exchange",
        "exchange_type": "topic",
    },
    "follow_sale": {
        "routing_key": "follow_sale.#",
        "topic": "topic_exchange",
        "exchange_type": "topic",
    },
}
class MyRouter(object):
    def route_for_task(self, task, args=None, kwargs=None):
        if task.startswith('task_save_latest'):
            return {
                'queue': 'topic_queue',
            }

        elif task.endswith('asin_to_keyword_task'):
            return {
                'queue': 'topic_queue',
            }
        elif task.startswith('follow_sale') or task.startswith('keyword_rank') or task.startswith('prime_asins'):
            return {
                "queue": "keyword_rank",
                #"queue": "follow_sale",
            }
        elif task.startswith('inventory') or task.startswith('asins_detail')\
            or task.startswith('review_monitor') or task.startswith('review_qa_collect'):
            return {
                "queue": "follow_sale",
            }
        # 剩下的其实就会被放到默认队列
        else:
            return None
# CELERY_ROUTES本来也可以用一个大的含有多个字典的字典,但是不如直接对它做一个名称统配
CELERY_ROUTES = (MyRouter(), )


# Django WYSIWYG Redactor settings.
REDACTOR_OPTIONS = {
    'lang': 'zh_Hans',
    'buttonSource': 'true',
    'toolbarFixed': 'true',
}
REDACTOR_UPLOAD = 'editor-uploads/'

# Emails
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'AMZ668导航 <amz668@amz668.com>'
EMAIL_HOST_USER = 'amz668@amz668.com'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = 'rhztxbrjgmvkbjbg'
EMAIL_USE_TLS = True

ACCOUNT_ACTIVATION_DAYS = 1

AXES_LOGIN_FAILURE_LIMIT = 10
AXES_USE_USER_AGENT = True
AXES_COOLOFF_TIME = 2

INTERNAL_IPS = ('127.0.0.1',)
DEBUG_TOOLBAR_PATCH_SETTINGS = False


import raven

RAVEN_CONFIG = {
    'dsn': 'https://fba2b3672c064c2fb941b398d52c9c53:f1557e93cb6a4ef4bb34ec4ce8f50d47@sentry.io/163654',
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR', # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

CKEDITOR_JQUERY_URL = '/static/jquery/jquery.min.js'
MEDIA_URL = '/static/media/'
CKEDITOR_UPLOAD_PATH = '/static/uploads/'
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_RESTRICT_BY_USER = True

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Full',
        'width': 758,
        'height': 300,
        'removePlugins': 'stylesheetparser',
        'extraPlugins': 'codesnippet',
    },
}
